#![allow(clippy::result_large_err)]

pub mod state;
pub mod instructions;

use {
    anchor_lang::prelude::*,
    anchor_spl::{
        metadata::{
            create_metadata_accounts_v3, mpl_token_metadata::types::DataV2,
            CreateMetadataAccountsV3, Metadata,
        },
        token::{Mint, Token},
    },
};

pub use state::*;
pub use instructions::*;

declare_id!("3xAPDjc41QGnBRzhLMJvGFPFaxGtKnhzANzBbSkujXjE");

#[program]
pub mod anchor_sbt {
    use super::*;

    pub fn create_sbt_mint(
        ctx: Context<CreateSbtMint>,
        token_name: String,
        token_symbol: String,
        token_uri: String,
    ) -> Result<()> {
        msg!("Creating SBT mint...");

        create_metadata_accounts_v3(
            CpiContext::new(
                ctx.accounts.token_metadata_program.to_account_info(),
                CreateMetadataAccountsV3 {
                    metadata: ctx.accounts.metadata_account.to_account_info(),
                    mint: ctx.accounts.mint_account.to_account_info(), 
                    mint_authority: ctx.accounts.payer.to_account_info(),
                    update_authority: ctx.accounts.payer.to_account_info(),
                    payer: ctx.accounts.payer.to_account_info(),
                    system_program: ctx.accounts.system_program.to_account_info(),
                    rent: ctx.accounts.rent.to_account_info(),
                },
            ),
            DataV2 {
                name: token_name,
                symbol: token_symbol,
                uri: token_uri,
                seller_fee_basis_points: 0,
            },
            false,
            true,
            None,
        )?;

        msg!("SBT mint created successfully.");

        Ok(())
    }
}
